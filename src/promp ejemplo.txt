Estoy desarrollando con un equipo este proyecto:

DESCRIPCIÓN DEL PROYECTO:
Desarrollaremos una aplicación web SPA (Single Page Application) para un museo de archivos históricos utilizando Express.js para el backend y React+Vite para el frontend, se usará CSS puro sin librerías, es necesario que el sitio sea responsive. La base de datos se gestionará con MySQL. Se utilizará Github para gestionar los repositorios del frontend y backend por separado. El objetivo es permitir a los visitantes consultar y visualizar archivos históricos, mientras que los empleados y administradores podrán gestionar y cargar archivos en el sistema.
Requisitos Funcionales:
1.	Roles de Usuario:
o	Visitante: Puede buscar y ver archivos sin necesidad de iniciar sesión o registrarse.
o	Usuario Registrado: Puede buscar y ver archivos, guardar archivos en una lista de favoritos y ver el historial de archivos visitados. Requiere registro e inicio de sesión.
o	Empleado: Puede buscar y ver archivos, subir imágenes y PDFs a través de formularios (cada formulario puede contener múltiples imágenes o PDFs), gestionar sus favoritos e historial de archivos subidos y modificados. Requiere registro e inicio de sesión.
o	Administrador: Tiene todos los permisos de los empleados, además de gestionar los permisos de los empleados (gestionar permisos como agregar, modificar, descargar, ver archivos ocultos o eliminar archivos). También puede restablecer la base de datos a un punto anterior y editar la portada, sección institucional y la sección “acerca de…” del sitio. Requiere registro e inicio de sesión.
2.	Registro y Autenticación:
o	Sección de registro que requiere correo electrónico, contraseña, nombre y apellido.
o	Validación de cuenta por correo electrónico, el usuario recibirá un correo con un enlace de verificación, luego de validar la verificación es registrado el usuario nuevo. Si el usuario no valida dentro de la primera hora, el registro es cancelado.
o	Sección de Inicio de sesión.
o	Mostrar por una notificación no invasiva que el usuario está conectado en el sitio y mostrar su rol.
o	La sección de historial y favoritos será una barra lateral ocultable en la derecha donde también mostrará los datos del perfil del usuario conectado y su rol.
o	Se necesita una sección para modificar los datos de usuario como nombre, apellido, contraseña y correo.
o	Permitir cerrar sesión.
3.	Gestión de Archivos (solo empleados y administradores):
o	Formulario de carga de archivos para empleados y administradores, permitiendo la subida de múltiples imágenes y PDFs.
o	Al buscar archivos los administradores y empleados pueden ver opciones para editar o eliminar archivos.
o	Baja lógica al eliminar archivos (se eliminarán de la base de datos después de un período), se permitirá restaurar archivo, solo administradores.
o	Sección de historial de archivos subidos y modificados por empleados y administradores (visible para ambos), permitirá a los administradores restaurar archivos modificados a un estado anterior.
o	Sección solo para administradores para activar nuevos empleados y otorgarles permisos (permisos como poder usar el formulario y crear archivos, modificar archivos, borrar archivos, ver archivos ocultos, descargar archivos).
o	Sección solo para administradores de editar imagen del home, titulo y texto de la página.
o	Sección solo para administradores de editar sección institucional.
o	Sección solo para administradores de editar sección acerca de.
o	Sección solo para administradores de editar sección datos de contacto del footer.
o	La sección de Empleados y Administradores será una barra lateral ocultable en la izquierda, el empleado solo podrá ver sus opciones habilitadas, el administrador puede ver todas las opciones.

4.	Funcionalidades Adicionales:
o	Contador de visitas de los archivos, que solo cuenta las visitas de visitantes y usuarios, evitando duplicados en el mismo día.
o	Sección con Ranking de archivos más visitados por los visitantes y usuarios.
o	Buscador de archivos.
o	Sección resultados de búsquedas en vista de lista infinita.
o	Sección visor de archivo con detalles del archivo y la vista de las imágenes o pdfs.
o	Visor de imágenes y PDFs integrado, sin permiso de descarga para visitantes y usuarios registrados. Solo empleados con permisos y administradores pueden descargar.
o	Botón para compartir enlaces en redes sociales.
o	Botón para cambiar de modo oscuro a modo claro en el navbar, el modo claro debe usar colores sepia, el modo oscuro debe ser la opción por defecto del sitio.
Requisitos No Funcionales:
1.	Seguridad y Privacidad:
o	Implementación de medidas para restringir el acceso no autorizado a las secciones de empleados y administradores mediante cuentas de usuario y roles.
2.	Manejo de Gran Volumen de Datos:
o	El sistema debe soportar un gran volumen de documentos (aproximadamente 360,000 imágenes y PDFs).
o	Las imágenes deben tener miniaturas para mostrarse en los resultados de búsqueda.
o	Se evalúa la posibilidad de que sea necesario convertir los archivos de imagen y PDF a formatos AVIF o WEBP, y volver a convertir en JPG al momento de descargar.
3.	Rendimiento:
o	El rendimiento debe ser adecuado para permitir una búsqueda y visualización eficiente de documentos.
4.	Historial, Auditoría y Respaldo:
o	Historial de creación y última modificación de archivos por empleados y administradores.
o	No se requiere historial de movimientos de visitantes o usuarios registrados.


Tengo esta estructura ya desarrollada en node.js con express.js, ya tengo implementado la ruta auth con toda la configuración para el login y registro de usuarios.
/proyecto
  /config
    db.js                # Configuración de la base de datos
  /controllers
    authController.js    # Controladores para autenticación
  /middlewares
    authMiddleware.js    # Middlewares de autenticación
  /models
    User.js              # Modelo de usuario
  /routes
    authRoutes.js        # Rutas para autenticación
  /utils
  app.js                 # Archivo principal de Express
  package.json           # Dependencias y scripts

quiero agregar el código de un amigo que desarrollo la carga de un formulario y archivos a la base de datos y guarda el archivo en una ruta del disco rigido:

const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const mysql = require('mysql2/promise');
const cors = require('cors');

const app = express();
const port = 5000;

app.use(cors());
app.use(express.json());

// Directorio para almacenar archivos subidos
const uploadsDir = 'E:\\backups';

// Asegurarse de que el directorio uploads existe
if (!fs.existsSync(uploadsDir)){
    fs.mkdirSync(uploadsDir, { recursive: true });
}

// Configuración de la conexión MySQL
const pool = mysql.createPool({
  host: 'localhost',
  port: 3306,
  user: 'root',
  password: '12356maxn',
  database: 'gestionArchivo',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

// Configurar multer para almacenar archivos
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadsDir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    if (file.mimetype === "image/png" || file.mimetype === "image/jpg" || file.mimetype === "image/jpeg" || file.mimetype === "application/pdf") {
      cb(null, true);
    } else {
      cb(new Error('Solo se permiten archivos .png, .jpg, .jpeg y .pdf'), false);
    }
  }
});

// Ruta para subir archivo
app.post('/upload', upload.single('archivo'), async (req, res) => {
  if (!req.file) {
    return res.status(400).send('No se subió ningún archivo');
  }
  
  try {
    const { autorIniciador, caratula, numeroFolios, fecha, tema } = req.body;
    const nombreArchivo = req.file.filename;
    
    const [result] = await pool.query(
      'INSERT INTO archivos (autor_iniciador, caratula, numero_folios, fecha, tema, nombre_archivo) VALUES (?, ?, ?, ?, ?, ?)',
      [autorIniciador, caratula, numeroFolios, fecha, tema, nombreArchivo]
    );
    
    res.json({ message: 'Archivo subido y guardado correctamente', id: result.insertId });
  } catch (error) {
    console.error('Error al guardar en la base de datos:', error);
    res.status(500).send('Error al guardar el archivo en la base de datos');
  }
});

// Ruta para obtener lista de archivos
app.get('/files', async (req, res) => {
  try {
    const [rows] = await pool.query('SELECT * FROM archivos');
    res.json(rows);
  } catch (error) {
    console.error('Error al obtener archivos:', error);
    res.status(500).send('Error al obtener archivos de la base de datos');
  }
});

// Ruta para servir archivos
app.use('/uploads', express.static(uploadsDir));

app.listen(port, () => {
  console.log(`Servidor corriendo en http://localhost:${port}`);
});

me ayudas agregar su codigo al proyecto de node.js
