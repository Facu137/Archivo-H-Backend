Estoy desarrollando con un equipo este proyecto:

Descripción del Proyecto:

Desarrollaremos una aplicación web SPA (Single Page Application) para un museo de archivos históricos utilizando Express.js para el backend y React+Vite para el frontend. La base de datos se gestionará con MySQL. El objetivo es permitir a los visitantes consultar y visualizar archivos históricos, mientras que los empleados y administradores podrán gestionar y cargar archivos en el sistema.

Requisitos Funcionales:

Roles de Usuario:

Visitante: Puede buscar y ver archivos sin necesidad de iniciar sesión o registrarse.
Usuario Registrado: Puede buscar y ver archivos, guardar archivos en una lista de favoritos y ver el historial de archivos visitados. Requiere registro e inicio de sesión.
Empleado: Puede buscar y ver archivos, subir imágenes y PDFs a través de formularios (cada formulario puede contener múltiples imágenes o PDFs), gestionar sus favoritos e historial de archivos subidos y modificados. Requiere registro e inicio de sesión.
Administrador: Tiene todos los permisos de los empleados, además de gestionar los permisos de los empleados (como agregar, modificar, descargar, ver archivos ocultos o eliminar archivos). También puede restablecer la base de datos a un punto anterior y editar la portada, sección institucional y la sección “acerca de…” del sitio. Requiere registro e inicio de sesión.
Registro y Autenticación:

El registro requiere correo electrónico, contraseña, nombre y apellido.
Validación de cuenta por correo electrónico.
Inicio de sesión para usuarios registrados, empleados y administradores.
Gestión de Archivos:

Formulario de carga de archivos para empleados y administradores, permitiendo la subida de múltiples imágenes y PDFs.
Baja lógica al eliminar archivos (se eliminarán de la base de datos después de un período).
Historial de archivos subidos y modificados por empleados y administradores.
Visor de imágenes y PDFs integrado, sin permiso de descarga para visitantes y usuarios registrados. Solo empleados con permisos y administradores pueden descargar.
Funcionalidades Adicionales:

Contador de visitas de los archivos, que solo cuenta las visitas de visitantes y usuarios, evitando duplicados en el mismo día.
Botón para compartir enlaces en redes sociales.
Requisitos No Funcionales:

Seguridad y Privacidad:

Implementación de medidas para restringir el acceso no autorizado a las secciones de empleados y administradores mediante cuentas de usuario y roles.
Manejo de Gran Volumen de Datos:

El sistema debe soportar un gran volumen de documentos (aproximadamente 360,000 imágenes y PDFs).
Rendimiento:

El rendimiento debe ser adecuado para permitir una búsqueda y visualización eficiente de documentos.
Historial, Auditoría y Respaldo:

Historial de creación y última modificación de archivos por empleados y administradores.
No se requiere historial de movimientos de visitantes o usuarios registrados.
Implementación Sugerida:

Backend (Express.js):

Configuración de la base de datos MySQL para gestionar los archivos, usuarios y roles.
Implementación de API RESTful para manejar las operaciones CRUD de los archivos y la gestión de usuarios.
Validación de datos y seguridad (autenticación y autorización).
Frontend (React+Vite):

Desarrollo de una interfaz de usuario intuitiva para buscar, visualizar y gestionar archivos.
Formularios de registro, inicio de sesión y carga de archivos.
Visor integrado para imágenes y PDFs.
Gestión de favoritos e historial de archivos visitados.
Contador de visitas y botón para compartir en redes sociales.
Seguridad y Rendimiento:

Uso de JWT (JSON Web Tokens) para autenticación y autorización.
Optimización de consultas a la base de datos y uso de técnicas de paginación para manejar el gran volumen de documentos.
Implementación de medidas de seguridad como cifrado de contraseñas y validación de entrada de usuario.
Esta estructura organizada y detallada ayudará a tu equipo a entender claramente los requisitos y las funcionalidades necesarias para desarrollar la aplicación de manera efectiva.

Tengo esta estructura ya desarrollada en node.js con express.js, ya tengo implementado la ruta file con toda la configuración
/proyecto
  /config
    db.js                # Configuración de la base de datos
  /controllers
    fileController.js    # Controladores para autenticación
  /middlewares
    uploadMiddleware    # Middlewares de autenticación
  /models
    User.js              # Modelo de usuario
  /routes
    fileRoutes.js        # Rutas para autenticación
  /utils
  app.js                 # Archivo principal de Express
  package.json           # Dependencias y scripts

quiero modificar el siguiente codigo de acuerdo a la base de datos proporcionada:

import pool from "../config/db.js";
import path from "path";

const getFileUrl = (filename) => {
  return `http://localhost:3000/uploads/${filename}`;
};

export const uploadFile = async (req, res) => {
  if (!req.file) {
    return res.status(400).send("No se subió ningún archivo");
  }

  try {
    const { autorIniciador, caratula, numeroFolios, tema, dia, mes, anio } = req.body;
const nombreArchivo = req.file.filename;

const [result] = await pool.query(
  "INSERT INTO archivos (autor_iniciador, caratula, numero_folios, tema, nombre_archivo, dia, mes, anio) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
  [autorIniciador, caratula, numeroFolios, tema, nombreArchivo, dia, mes, anio]
);

    res.json({
      message: "Archivo subido y guardado correctamente",
      id: result.insertId,
    });
  } catch (error) {
    console.error("Error al guardar en la base de datos:", error);
    res.status(500).send("Error al guardar el archivo en la base de datos");
  }
};

export const getFiles = async (req, res) => {
  try {
    const [rows] = await pool.query("SELECT * FROM archivos");
    const filesWithUrl = rows.map(file => ({
      ...file,
      url: getFileUrl(file.nombre_archivo)
    }));
    res.json(filesWithUrl);
  } catch (error) {
    console.error("Error al obtener archivos:", error);
    res.status(500).send("Error al obtener archivos de la base de datos");
  }
};

export const searchFilesByTopic = async (req, res) => {
  const { topic } = req.query;
  try {
    const [rows] = await pool.query("SELECT * FROM archivos WHERE tema LIKE ?", [`%${topic}%`]);
    const filesWithUrl = rows.map(file => ({
      ...file,
      url: getFileUrl(file.nombre_archivo)
    }));
    res.json(filesWithUrl);
  } catch (error) {
    console.error("Error al buscar archivos por tema:", error);
    res.status(500).send("Error al buscar archivos por tema");
  }
};


export const searchFilesByAuthor = async (req, res) => {
  const { author } = req.query;
  try {
    const [rows] = await pool.query("SELECT * FROM archivos WHERE autor_iniciador LIKE ?", [`%${author}%`]);
    const filesWithUrl = rows.map(file => ({
      ...file,
      url: getFileUrl(file.nombre_archivo)
    }));
    res.json(filesWithUrl);
  } catch (error) {
    console.error("Error al buscar archivos por autor:", error);
    res.status(500).send("Error al buscar archivos por autor");
  }
};

export const searchFilesByDate = async (req, res) => {
  const { startYear, endYear, startMonth, endMonth, startDay, endDay } = req.query;
  try {
    let query = "SELECT * FROM archivos WHERE anio BETWEEN ? AND ?";
    const params = [startYear, endYear];

    if (startMonth && endMonth) {
      query += " AND mes BETWEEN ? AND ?";
      params.push(startMonth, endMonth);
    }

    if (startDay && endDay) {
      query += " AND dia BETWEEN ? AND ?";
      params.push(startDay, endDay);
    }

    const [rows] = await pool.query(query, params);
    const filesWithUrl = rows.map(file => ({
      ...file,
      url: getFileUrl(file.nombre_archivo)
    }));
    res.json(filesWithUrl);
  } catch (error) {
    console.error("Error al buscar archivos por fecha:", error);
    res.status(500).send("Error al buscar archivos por fecha");
  }
};

export const getFileById = async (req, res) => {
  const { id } = req.params;
  try {
    const [rows] = await pool.query("SELECT * FROM archivos WHERE id = ?", [id]);
    if (rows.length === 0) {
      return res.status(404).json({ message: "Archivo no encontrado" });
    }
    const fileWithUrl = {
      ...rows[0],
      url: getFileUrl(rows[0].nombre_archivo)
    };
    res.json(fileWithUrl);
  } catch (error) {
    console.error("Error al obtener archivo por ID:", error);
    res.status(500).send("Error al obtener archivo por ID");
  }
};

export const getFilesByUser = async (req, res) => {
  const { userId } = req.params;
  try {
    const [rows] = await pool.query("SELECT * FROM archivos WHERE usuario_id = ?", [userId]);
    const filesWithUrl = rows.map(file => ({
      ...file,
      url: getFileUrl(file.nombre_archivo)
    }));
    res.json(filesWithUrl);
  } catch (error) {
    console.error("Error al obtener archivos por usuario:", error);
    res.status(500).send("Error al obtener archivos por usuario");
  }
};